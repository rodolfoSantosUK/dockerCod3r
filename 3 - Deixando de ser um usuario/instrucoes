
* BAIXADO E EXECUTANDO CONTAINER USANDO COMANDO PULL

docker image pull redis:latest

* COMANDO BASICOS

docker image pull
docker image ls
docker image inspect
docker image tag <imagem de Origem> <tag>
docker image build
docker image push

* EVITANDO USAR O SUDO NA MAQUINA LOCAL
sudo usermod -aG docker rodolfo

INSTALANDO EXTENSÃO DOCKER NO VSCODE

* CRIANDO UM DOCKERFILE

// baseando a imagem a partir de nginx
FROM nginx:latest
RUN echo '<h1> Hello World! </h1>' > /usr/share/nginx/html/index.html

* CRIANDO PRIMEIRA IMAGEM

criando arquivo Dockerfile

FROM nginx:latest
RUN echo '<h1>Hello World !!</>' > /usr/share/nginx/html/index.html

Comando para criar a imagem:

sudo docker image build -t ex_simple-build .

* CRIANDO IMAGEM COM ARGUMENTO

FROM debian
LABEL maintainer 'Aluno cod3r <aluno at cod3r.com.br>'

ARG S3_BUCKET=files
ENV S3_BUCKET=${S3_BUCKET}

sudo docker image build -t ex_docker_build_arg .

// sem passar argumento
sudo docker container run ex_docker_build_arg bash -c 'echo $S3_BUCKET'

//passando argumento
sudo docker image build --build-arg S3_BUCKET=myApp -t ex_build_arg .
sudo docker container run ex_build_arg bash -c 'echo $S3_BUCKET'


* USO DAS INSTRUÇÕES DE POVOAMENTO

FROM nginx:latest

LABEL maintainer 'Aluno Cod3r <aluno at cod3r.com.br>'

RUN echo '<h1>Sem conteudo</h1>' > /usr/share/nginx/html/conteudo.html
COPY *.html /usr/share/nginx/html/

sudo docker build -t ex-build-copy
sudo docker container run -p 80:80 ex-build-copy


* USO DAS INSTRUÇÕES PARA EXECUÇÃO DO CONTAINER(PARTE 1)
Criar diretório : CURSO-DOCKER/build-dev

sudo docker image build -t ex-build-dev .

sudo docker container run -it -v $(pwd):/app -p 80:8000 --name python-server ex-build-dev

* Acessando log de um container através de outro container

sudo docker container run -it --volumes-from=python-server debian cat /log/http-server.log